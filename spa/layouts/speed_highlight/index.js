import"./typedef.js";import expandData from"./common.js";import{detectLanguage}from"./detect.js";const langs={},sanitize=(e="")=>e.replaceAll("&","&#38;").replaceAll?.("<","&lt;").replaceAll?.(">","&gt;"),toSpan=(e,t)=>t?`<span class="shj-syn-${t}">${e}</span>`:e;export async function tokenize(e,t,n){try{let o,r,s={},l,i=[],a=0,d=typeof t=="string"?await(langs[t]??=import(`./languages/${t}.js`)):t,c=[...typeof t=="string"?d.default:t.sub];for(;a<e.length;){s.index=null;for(o=c.length;o-- >0;){if(r=c[o].expand?expandData[c[o].expand]:c[o],i[o]===void 0||i[o].match.index<a){if(r.match.lastIndex=a,l=r.match.exec(e),l===null){c.splice(o,1),i.splice(o,1);continue}i[o]={match:l,lastIndex:r.match.lastIndex}}i[o].match[0]&&(i[o].match.index<=s.index||s.index===null)&&(s={part:r,index:i[o].match.index,match:i[o].match[0],end:i[o].lastIndex})}if(s.index===null)break;n(e.slice(a,s.index),d.type),a=s.end,s.part.sub?await tokenize(s.match,typeof s.part.sub=="string"?s.part.sub:typeof s.part.sub=="function"?s.part.sub(s.match):s.part,n):n(s.match,s.part.type)}n(e.slice(a,e.length),d.type)}catch{n(e)}}export async function highlightText(e,t,n=!0,s={}){let o="";return await tokenize(e,t,(e,t)=>o+=toSpan(sanitize(e),t)),n?`<div><div class="shj-numbers">${"<div></div>".repeat(!s.hideLineNumbers&&e.split(`
`).length)}</div><div>${o}</div></div>`:o}export async function highlightElement(e,t){let s=e.innerText.trim(),n=detectLanguage(s),o="multiline";e.dataset.lang=n,e.className="shj-lang-"+n,e.innerHTML=await highlightText(s,n,o=="multiline",t)}export let highlightAll=async e=>document.querySelectorAll("codeblock").forEach(t=>highlightElement(t,e));export let loadLanguage=(e,t)=>{langs[e]=t}