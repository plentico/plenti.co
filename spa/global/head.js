/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from '../web_modules/svelte/internal/index.mjs';

import { makeTitle } from '../scripts/make_title.js';

function create_if_block_1(ctx) {
	let meta0;
	let meta0_content_value;
	let t;
	let meta1;
	let meta1_content_value;

	return {
		c() {
			meta0 = element("meta");
			t = space();
			meta1 = element("meta");
			this.h();
		},
		l(nodes) {
			meta0 = claim_element(nodes, "META", { name: true, content: true });
			t = claim_space(nodes);
			meta1 = claim_element(nodes, "META", { name: true, content: true });
			this.h();
		},
		h() {
			attr(meta0, "name", "description");
			attr(meta0, "content", meta0_content_value = /*content*/ ctx[0].fields.meta.desc);
			attr(meta1, "name", "keywords");
			attr(meta1, "content", meta1_content_value = /*content*/ ctx[0].fields.meta.keywords);
		},
		m(target, anchor) {
			insert(target, meta0, anchor);
			insert(target, t, anchor);
			insert(target, meta1, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*content*/ 1 && meta0_content_value !== (meta0_content_value = /*content*/ ctx[0].fields.meta.desc)) {
				attr(meta0, "content", meta0_content_value);
			}

			if (dirty & /*content*/ 1 && meta1_content_value !== (meta1_content_value = /*content*/ ctx[0].fields.meta.keywords)) {
				attr(meta1, "content", meta1_content_value);
			}
		},
		d(detaching) {
			if (detaching) detach(meta0);
			if (detaching) detach(t);
			if (detaching) detach(meta1);
		}
	};
}

// (21:2) {:else}
function create_else_block(ctx) {
	let meta0;
	let meta0_content_value;
	let t;
	let meta1;

	return {
		c() {
			meta0 = element("meta");
			t = space();
			meta1 = element("meta");
			this.h();
		},
		l(nodes) {
			meta0 = claim_element(nodes, "META", { name: true, content: true });
			t = claim_space(nodes);
			meta1 = claim_element(nodes, "META", { name: true, content: true });
			this.h();
		},
		h() {
			attr(meta0, "name", "twitter:title");
			attr(meta0, "content", meta0_content_value = /*content*/ ctx[0].fields.title);
			attr(meta1, "name", "twitter:description");
			attr(meta1, "content", "Build more sites, manage less overhead.");
		},
		m(target, anchor) {
			insert(target, meta0, anchor);
			insert(target, t, anchor);
			insert(target, meta1, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*content*/ 1 && meta0_content_value !== (meta0_content_value = /*content*/ ctx[0].fields.title)) {
				attr(meta0, "content", meta0_content_value);
			}
		},
		d(detaching) {
			if (detaching) detach(meta0);
			if (detaching) detach(t);
			if (detaching) detach(meta1);
		}
	};
}

// (17:2) {#if content.type == "themes"}
function create_if_block(ctx) {
	let meta0;
	let meta0_content_value;
	let t0;
	let meta1;
	let meta1_content_value;
	let t1;
	let meta2;
	let meta2_content_value;

	return {
		c() {
			meta0 = element("meta");
			t0 = space();
			meta1 = element("meta");
			t1 = space();
			meta2 = element("meta");
			this.h();
		},
		l(nodes) {
			meta0 = claim_element(nodes, "META", { name: true, content: true });
			t0 = claim_space(nodes);
			meta1 = claim_element(nodes, "META", { name: true, content: true });
			t1 = claim_space(nodes);
			meta2 = claim_element(nodes, "META", { name: true, content: true });
			this.h();
		},
		h() {
			attr(meta0, "name", "twitter:title");
			attr(meta0, "content", meta0_content_value = /*content*/ ctx[0].fields.name);
			attr(meta1, "name", "twitter:description");
			attr(meta1, "content", meta1_content_value = "Check out the " + /*content*/ ctx[0].fields.name + " Plenti theme!");
			attr(meta2, "name", "twitter:image");
			attr(meta2, "content", meta2_content_value = "https://plenti.co/assets/themes/" + /*content*/ ctx[0].fields.name.toLowerCase() + ".png");
		},
		m(target, anchor) {
			insert(target, meta0, anchor);
			insert(target, t0, anchor);
			insert(target, meta1, anchor);
			insert(target, t1, anchor);
			insert(target, meta2, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*content*/ 1 && meta0_content_value !== (meta0_content_value = /*content*/ ctx[0].fields.name)) {
				attr(meta0, "content", meta0_content_value);
			}

			if (dirty & /*content*/ 1 && meta1_content_value !== (meta1_content_value = "Check out the " + /*content*/ ctx[0].fields.name + " Plenti theme!")) {
				attr(meta1, "content", meta1_content_value);
			}

			if (dirty & /*content*/ 1 && meta2_content_value !== (meta2_content_value = "https://plenti.co/assets/themes/" + /*content*/ ctx[0].fields.name.toLowerCase() + ".png")) {
				attr(meta2, "content", meta2_content_value);
			}
		},
		d(detaching) {
			if (detaching) detach(meta0);
			if (detaching) detach(t0);
			if (detaching) detach(meta1);
			if (detaching) detach(t1);
			if (detaching) detach(meta2);
		}
	};
}

function create_fragment(ctx) {
	let head;
	let meta0;
	let t0;
	let meta1;
	let t1;
	let title;

	let t2_value = (/*content*/ ctx[0].type == "index"
	? "Home"
	: makeTitle(/*content*/ ctx[0].filename)) + "";

	let t2;
	let t3;
	let t4;
	let t5;
	let meta2;
	let t6;
	let meta3;
	let t7;
	let t8;
	let script0;
	let script0_src_value;
	let t9;
	let script1;
	let script1_src_value;
	let t10;
	let script2;
	let script2_src_value;
	let t11;
	let link0;
	let t12;
	let link1;
	let t13;
	let link2;
	let t14;
	let link3;
	let if_block0 = /*content*/ ctx[0].fields.meta && create_if_block_1(ctx);

	function select_block_type(ctx, dirty) {
		if (/*content*/ ctx[0].type == "themes") return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block1 = current_block_type(ctx);

	return {
		c() {
			head = element("head");
			meta0 = element("meta");
			t0 = space();
			meta1 = element("meta");
			t1 = space();
			title = element("title");
			t2 = text(t2_value);
			t3 = text(" | Plenti - A Static Site Generator for Svelte");
			t4 = space();
			if (if_block0) if_block0.c();
			t5 = space();
			meta2 = element("meta");
			t6 = space();
			meta3 = element("meta");
			t7 = space();
			if_block1.c();
			t8 = space();
			script0 = element("script");
			t9 = space();
			script1 = element("script");
			t10 = space();
			script2 = element("script");
			t11 = space();
			link0 = element("link");
			t12 = space();
			link1 = element("link");
			t13 = space();
			link2 = element("link");
			t14 = space();
			link3 = element("link");
			this.h();
		},
		l(nodes) {
			head = claim_element(nodes, "HEAD", {});
			var head_nodes = children(head);
			meta0 = claim_element(head_nodes, "META", { charset: true });
			t0 = claim_space(head_nodes);
			meta1 = claim_element(head_nodes, "META", { name: true, content: true });
			t1 = claim_space(head_nodes);
			title = claim_element(head_nodes, "TITLE", {});
			var title_nodes = children(title);
			t2 = claim_text(title_nodes, t2_value);
			t3 = claim_text(title_nodes, " | Plenti - A Static Site Generator for Svelte");
			title_nodes.forEach(detach);
			t4 = claim_space(head_nodes);
			if (if_block0) if_block0.l(head_nodes);
			t5 = claim_space(head_nodes);
			meta2 = claim_element(head_nodes, "META", { name: true, content: true });
			t6 = claim_space(head_nodes);
			meta3 = claim_element(head_nodes, "META", { name: true, content: true });
			t7 = claim_space(head_nodes);
			if_block1.l(head_nodes);
			t8 = claim_space(head_nodes);
			script0 = claim_element(head_nodes, "SCRIPT", { "data-domain": true, src: true });
			var script0_nodes = children(script0);
			script0_nodes.forEach(detach);
			t9 = claim_space(head_nodes);
			script1 = claim_element(head_nodes, "SCRIPT", { src: true });
			var script1_nodes = children(script1);
			script1_nodes.forEach(detach);
			t10 = claim_space(head_nodes);
			script2 = claim_element(head_nodes, "SCRIPT", { type: true, src: true });
			var script2_nodes = children(script2);
			script2_nodes.forEach(detach);
			t11 = claim_space(head_nodes);
			link0 = claim_element(head_nodes, "LINK", { href: true, rel: true });
			t12 = claim_space(head_nodes);
			link1 = claim_element(head_nodes, "LINK", { href: true, rel: true });
			t13 = claim_space(head_nodes);
			link2 = claim_element(head_nodes, "LINK", { rel: true, type: true, href: true });
			t14 = claim_space(head_nodes);
			link3 = claim_element(head_nodes, "LINK", { rel: true, href: true });
			head_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(meta0, "charset", "utf-8");
			attr(meta1, "name", "viewport");
			attr(meta1, "content", "width=device-width,initial-scale=1");
			attr(meta2, "name", "twitter:card");
			attr(meta2, "content", "summary");
			attr(meta3, "name", "twitter:site");
			attr(meta3, "content", "@plentico");
			script0.defer = true;
			attr(script0, "data-domain", "plenti.co");
			if (script0.src !== (script0_src_value = "https://plausible.io/js/plausible.js")) attr(script0, "src", script0_src_value);
			script1.async = true;
			script1.defer = true;
			if (script1.src !== (script1_src_value = "https://nullitics.com/script.js")) attr(script1, "src", script1_src_value);
			attr(script2, "type", "module");
			if (script2.src !== (script2_src_value = "/spa/ejected/main.js")) attr(script2, "src", script2_src_value);
			attr(link0, "href", "https://fonts.googleapis.com/css2?family=NTR&display=swap&family=Heebo:wght@900&family=Kalam&display=swap");
			attr(link0, "rel", "stylesheet");
			attr(link1, "href", "https://fonts.googleapis.com/css2?family=Inconsolata&display=swap");
			attr(link1, "rel", "stylesheet");
			attr(link2, "rel", "icon");
			attr(link2, "type", "image/svg+xml");
			attr(link2, "href", "/assets/p.svg");
			attr(link3, "rel", "stylesheet");
			attr(link3, "href", "/spa/bundle.css");
		},
		m(target, anchor) {
			insert(target, head, anchor);
			append(head, meta0);
			append(head, t0);
			append(head, meta1);
			append(head, t1);
			append(head, title);
			append(title, t2);
			append(title, t3);
			append(head, t4);
			if (if_block0) if_block0.m(head, null);
			append(head, t5);
			append(head, meta2);
			append(head, t6);
			append(head, meta3);
			append(head, t7);
			if_block1.m(head, null);
			append(head, t8);
			append(head, script0);
			append(head, t9);
			append(head, script1);
			append(head, t10);
			append(head, script2);
			append(head, t11);
			append(head, link0);
			append(head, t12);
			append(head, link1);
			append(head, t13);
			append(head, link2);
			append(head, t14);
			append(head, link3);
		},
		p(ctx, [dirty]) {
			if (dirty & /*content*/ 1 && t2_value !== (t2_value = (/*content*/ ctx[0].type == "index"
			? "Home"
			: makeTitle(/*content*/ ctx[0].filename)) + "")) set_data(t2, t2_value);

			if (/*content*/ ctx[0].fields.meta) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					if_block0.m(head, t5);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if_block1.d(1);
				if_block1 = current_block_type(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(head, t8);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(head);
			if (if_block0) if_block0.d();
			if_block1.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { content } = $$props;

	$$self.$$set = $$props => {
		if ("content" in $$props) $$invalidate(0, content = $$props.content);
	};

	return [content];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { content: 0 });
	}
}

export default Component;