/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	space,
	text
} from "svelte/internal";

function create_fragment(ctx) {
	let nav;
	let div1;
	let span0;
	let a0;
	let img0;
	let img0_src_value;
	let t0;
	let input;
	let t1;
	let label;
	let span1;
	let t2;
	let span2;
	let t3;
	let span3;
	let t4;
	let span4;
	let t5;
	let div0;
	let a1;
	let t6;
	let t7;
	let a2;
	let t8;
	let t9;
	let a3;
	let t10;
	let t11;
	let a4;
	let t12;
	let t13;
	let a5;
	let img1;
	let img1_src_value;
	let mounted;
	let dispose;

	return {
		c() {
			nav = element("nav");
			div1 = element("div");
			span0 = element("span");
			a0 = element("a");
			img0 = element("img");
			t0 = space();
			input = element("input");
			t1 = space();
			label = element("label");
			span1 = element("span");
			t2 = space();
			span2 = element("span");
			t3 = space();
			span3 = element("span");
			t4 = space();
			span4 = element("span");
			t5 = space();
			div0 = element("div");
			a1 = element("a");
			t6 = text("Docs");
			t7 = space();
			a2 = element("a");
			t8 = text("Themes");
			t9 = space();
			a3 = element("a");
			t10 = text("Donate");
			t11 = space();
			a4 = element("a");
			t12 = text("Download");
			t13 = space();
			a5 = element("a");
			img1 = element("img");
			this.h();
		},
		l(nodes) {
			nav = claim_element(nodes, "NAV", { class: true });
			var nav_nodes = children(nav);
			div1 = claim_element(nav_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			span0 = claim_element(div1_nodes, "SPAN", { id: true, class: true });
			var span0_nodes = children(span0);
			a0 = claim_element(span0_nodes, "A", { href: true, class: true });
			var a0_nodes = children(a0);
			img0 = claim_element(a0_nodes, "IMG", { alt: true, src: true, class: true });
			a0_nodes.forEach(detach);
			span0_nodes.forEach(detach);
			t0 = claim_space(div1_nodes);
			input = claim_element(div1_nodes, "INPUT", { type: true, id: true, class: true });
			t1 = claim_space(div1_nodes);
			label = claim_element(div1_nodes, "LABEL", { for: true, id: true, class: true });
			var label_nodes = children(label);
			span1 = claim_element(label_nodes, "SPAN", { class: true });
			children(span1).forEach(detach);
			t2 = claim_space(label_nodes);
			span2 = claim_element(label_nodes, "SPAN", { class: true });
			children(span2).forEach(detach);
			t3 = claim_space(label_nodes);
			span3 = claim_element(label_nodes, "SPAN", { class: true });
			children(span3).forEach(detach);
			t4 = claim_space(label_nodes);
			span4 = claim_element(label_nodes, "SPAN", { class: true });
			children(span4).forEach(detach);
			label_nodes.forEach(detach);
			t5 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { id: true, class: true });
			var div0_nodes = children(div0);
			a1 = claim_element(div0_nodes, "A", { class: true, href: true });
			var a1_nodes = children(a1);
			t6 = claim_text(a1_nodes, "Docs");
			a1_nodes.forEach(detach);
			t7 = claim_space(div0_nodes);
			a2 = claim_element(div0_nodes, "A", { class: true, href: true });
			var a2_nodes = children(a2);
			t8 = claim_text(a2_nodes, "Themes");
			a2_nodes.forEach(detach);
			t9 = claim_space(div0_nodes);
			a3 = claim_element(div0_nodes, "A", { class: true, href: true });
			var a3_nodes = children(a3);
			t10 = claim_text(a3_nodes, "Donate");
			a3_nodes.forEach(detach);
			t11 = claim_space(div0_nodes);
			a4 = claim_element(div0_nodes, "A", { class: true, href: true });
			var a4_nodes = children(a4);
			t12 = claim_text(a4_nodes, "Download");
			a4_nodes.forEach(detach);
			t13 = claim_space(div0_nodes);
			a5 = claim_element(div0_nodes, "A", { class: true, href: true });
			var a5_nodes = children(a5);
			img1 = claim_element(a5_nodes, "IMG", { src: true, alt: true, class: true });
			a5_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			nav_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(img0, "alt", "planarian");
			if (img0.src !== (img0_src_value = "/assets/plentico.svg")) attr(img0, "src", img0_src_value);
			attr(img0, "class", "svelte-34czqc");
			attr(a0, "href", "/");
			attr(a0, "class", "svelte-34czqc");
			attr(span0, "id", "brand");
			attr(span0, "class", "svelte-34czqc");
			attr(input, "type", "checkbox");
			attr(input, "id", "toggle");
			attr(input, "class", "hidden svelte-34czqc");
			attr(span1, "class", "svelte-34czqc");
			attr(span2, "class", "svelte-34czqc");
			attr(span3, "class", "svelte-34czqc");
			attr(span4, "class", "svelte-34czqc");
			attr(label, "for", "toggle");
			attr(label, "id", "hamburger");
			attr(label, "class", "svelte-34czqc");
			attr(a1, "class", "nav-link svelte-34czqc");
			attr(a1, "href", "/docs");
			attr(a2, "class", "nav-link svelte-34czqc");
			attr(a2, "href", "/themes");
			attr(a3, "class", "nav-link svelte-34czqc");
			attr(a3, "href", "https://github.com/sponsors/plentico");
			attr(a4, "class", "nav-link button svelte-34czqc");
			attr(a4, "href", "/download");
			if (img1.src !== (img1_src_value = "/assets/social/github.svg")) attr(img1, "src", img1_src_value);
			attr(img1, "alt", "GitHub Octocat Icon");
			attr(img1, "class", "svelte-34czqc");
			attr(a5, "class", "nav-link svelte-34czqc");
			attr(a5, "href", "https://github.com/plentico/plenti");
			attr(div0, "id", "menu");
			attr(div0, "class", "svelte-34czqc");
			attr(div1, "class", "container svelte-34czqc");
			attr(nav, "class", "svelte-34czqc");
		},
		m(target, anchor) {
			insert(target, nav, anchor);
			append(nav, div1);
			append(div1, span0);
			append(span0, a0);
			append(a0, img0);
			append(div1, t0);
			append(div1, input);
			input.checked = /*checked*/ ctx[0];
			append(div1, t1);
			append(div1, label);
			append(label, span1);
			append(label, t2);
			append(label, span2);
			append(label, t3);
			append(label, span3);
			append(label, t4);
			append(label, span4);
			append(div1, t5);
			append(div1, div0);
			append(div0, a1);
			append(a1, t6);
			append(div0, t7);
			append(div0, a2);
			append(a2, t8);
			append(div0, t9);
			append(div0, a3);
			append(a3, t10);
			append(div0, t11);
			append(div0, a4);
			append(a4, t12);
			append(div0, t13);
			append(div0, a5);
			append(a5, img1);

			if (!mounted) {
				dispose = [
					listen(input, "change", /*input_change_handler*/ ctx[2]),
					listen(a1, "click", /*uncheck*/ ctx[1]),
					listen(a2, "click", /*uncheck*/ ctx[1]),
					listen(a3, "click", /*uncheck*/ ctx[1]),
					listen(a4, "click", /*uncheck*/ ctx[1])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*checked*/ 1) {
				input.checked = /*checked*/ ctx[0];
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(nav);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let checked = false;

	const uncheck = () => {
		$$invalidate(0, checked = false);
	};

	function input_change_handler() {
		checked = this.checked;
		$$invalidate(0, checked);
	}

	return [checked, uncheck, input_change_handler];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Component;