const allContent=[{pager:null,type:"_index",path:"/",filepath:"content/_index.json",filename:"_index.json",fields:{title:"Plenti: Svelte websites without hassle.",intro:{title:"Plenti makes static sites",phrases:["excessively simple","feel like the 90s","with deadlines in mind","ready for editors"],image:{src:"/media/hero.svg",alt:"planarian looking at screen"},body:"We're an open source Svelte SSG that handles routing, pagination, HTML fallbacks, and more so you can build apps with less hassle.",cta:[{link:"/download",text:"Give it to me"},{link:"https://www.youtube.com/watch?v=Gr3KTOnsWEM&list=PLbWvcwWtuDm0tIrvD_xHvUXHBftbHDy5T",text:"See it in action"}]},editor:{title:"Edit right on the page",image:{src:"/media/edit.gif",alt:"Animation of typing on a computer"},body:"Seriously, give it a shot! You can edit this text directly. That's how easy it will be to maintain the content on your site."},features:{background:"/media/planarian-background.svg",items:[{title:"No Security Updates",img:"/media/features/security.svg"},{title:"Cheap / Free Hosting",img:"/media/features/hosting.svg"},{title:"Fast Page Loads",img:"/media/features/speed.svg"},{title:"Fast Build Times",img:"/media/features/builds.svg"},{title:"Distributed Sites",img:"/media/features/cdn.svg"},{title:"No Vendor Lock-In",img:"/media/features/vendor.svg"}]},setup:[{title:"Out-of-the-Box",title_accent:"Content Editing",body:"Ship sites with a lightweight Content Management System. No extra software is needed to handoff to editors.",img:"/media/setup/edit.png"},{title:"Git Backend",title_accent:"No Database",body:"Ditch the SQL headaches and simply connect to a Git backend. Finally content editors and developers can speak the same language.",img:"/media/setup/git.png"},{title:"Content Structure",title_accent:"Flexible",body:"There are no required fields or content types in Plenti. You define whatever structure works best for you and your project.",img:"/media/setup/json.png"},{title:"Svelte Components",title_accent:"Reactive",body:"Build with a fast and easy to understand component framework. Enjoy automatic HTML fallbacks for your single page apps.",img:"/media/setup/svelte.png"},{title:"Commandline Tool",title_accent:"Fast",body:"Save time with automatic scaffolding for repetitive tasks. The CLI tool doesn't require internet access or dependencies.",img:"/media/setup/cli.png"}],cta:{title:"Plenti is 100% Free and Open Source",link:{text:"Show me the code",url:"https://github.com/plentico/plenti"}},meta:{desc:"A Svelte SSG with Golang backend for the JAMstack",keywords:"Svelte, Go, JAMstack, SSG, Git-CMS"}}},{pager:null,type:"docs",path:"docs",filepath:"content/docs/_index.json",filename:"_index.json",fields:{title:"Introduction",group:"Getting Started",order:.01,body:"<h2>What is Plenti?</h2>Plenti is an open source Build-Time Render (BTR) Engine. Some people refer to it as a Static Site Generator (SSG) or Jamstack (JavaScript, APIs, Markup) framework. The templates are based on Svelte, which is a JavaScript library for building reactive user interfaces. Because Svelte is compiled, your app stays very light and performs well, even on underpowered devices. You might also notice that Plenti runs significantly faster than other JavaScript SSGs you may have tried. This is because the commandline interface (CLI) is built using Go and we've cut out slow processes like traditional bundlers. Our goal is to keep the tooling to a minimum so it's easy to install and use.<div><h2>What makes it different?</h2>We think the missing piece that will open up BTR websites (SSGs, Jamstack) to the masses is an integrated, Git-backed CMS.&nbsp;<span style=\"color: var(--base-dark);\">Plenti is the only BTR project that ships with a fully integrated editing experience that runs directly in the browser of your deployed site (you don't need to run a separate server or service). Our entire architecture is designed around making this work in real time so editors are as close as possible to the content they're writing while offloading builds to CI (continuous integration) so developers can create a full product experience just by writing frontend code.</span></div><div><h2>Why not just use Hugo or NextJS?</h2></div><div>Most solutions have optimized for either the build process, or the display of the website. That's why you see so many SSGs claiming to be the fastest - they are all talking about different things.<span style=\"color: var(--base-dark);\">&nbsp;To create a full editing experience similar to Wordpress out-of-the-box, we needed both a fast build and a reactive frontend that could handle previews and connect to a Git repository. That's why we're obsessing over speed (we're actively trying to make the builds even faster). We also use a simple JSON data source instead of Markdown, because it's a web standard for APIs and we intend for you to edit content directly in the browser.</span></div><div><h2>Is it beginner friendly?</h2></div><div><span style=\"color: var(--base-dark);\">To get started, having some Svelte experience is helpful, but working knowledge of HTML and CSS fundamentals should be enough to get up and running with Plenti. We try to keep the footprint for the project as small as possible so your can orient yourself within the codebase without getting overwhelmed. Plenti requires minimum setup. We built a \"discoverable\" CMS that analyzes your content source to give you sane defaults for your editing experience. You can extend this if you want something specific, but you don't need to do any configuration to get it to just work. There are no shortage of excellent headless CMS options on the market for JAMstack, but most require purchasing a license for a proprietary product, take significant developer time to connect to your website, lack on features like live displays, and there is often duplicate work to match your data source structure with the CMS fields. We want you to have a fully open source option that is a complete product experience without any required services or add-ons.</span></div>"}},{pager:null,type:"docs",path:"docs/allcomponents",filepath:"content/docs/allComponents.json",filename:"allComponents.json",fields:{title:"allComponents",group:"Magic Variables",deprecated:"<code>allComponents</code> is now <code>allLayouts</code>, see <a href='/docs/alllayouts'>details</a>.",order:3.02,body:'Description<br>The <code>allComponents</code> variable is a default prop loaded by the Plenti generator automatically. It holdsclass constructors for every svelte template on your site. This is allows you to dynamically load any component withouthaving to import it explicitly or worry about SSR issues when generating HTML fallbacks.Understanding Component Signatures<br>Each entry in <code>allComponents</code> is saved as a "component signature" to ensure uniqueness.The component signature for a template is simply its path with any forward slashes "/" or periods "."converted into underscores "_". For example <code>layout/components/grid.svelte</code> would become<code>layout_components_grid_svelte</code>. The signatures are absolute, not relative, so they should alwaysstart with "layout" and end with "svelte".Accessing templates in allComponents<br>To access a particular template in the <code>allComponents</code>object, use the component signature with either dot notation (e.g. <code>allComponents.layout_components_grid_svelte</code> or bracket notation<code>allComponents["layout_components_grid_svelte"]</code>. It\'s common to use variables provided from your JSON data sourceto target a particular component, so you\'d use bracket notation for that: <code>allComponents[someVariable]</code> (where "someVariable" is equal toa component signature).'}},{pager:null,type:"docs",path:"docs/allcontent",filepath:"content/docs/allContent.json",filename:"allContent.json",fields:{title:"allContent",group:"Magic Variables",order:3.01,body:'<h2>Description</h2>The <code>allContent</code> variable is a default prop loaded by the Plenti generator automatically. It holds thefield values for every piece of content on your site. This is very handy for creating lists, or creating aggregate pages such as a "blog posts" landing page or "recent news" page.<div><h2>Filter allContent to get a specific type</h2>By default <code>allContent</code> holds <em>everything</em> from your "content" folder. You can filter this to get a list of a particular type of content, like <code>blog</code> for example:<br><br><codeblock>{#each allContent as content}<br>&nbsp;&nbsp;{#if content.type == blog}<br>&nbsp;&nbsp;&nbsp;&nbsp;{content.path}<br>&nbsp;&nbsp;{/if}<br>{/each}</codeblock></div>'}},{pager:null,type:"docs",path:"docs/alllayouts",filepath:"content/docs/allLayouts.json",filename:"allLayouts.json",fields:{title:"allLayouts",group:"Magic Variables",order:3.02,body:'<h2>Description</h2>The <code>allLayouts</code> variable is a default prop loaded by the Plenti generator automatically. It holds class constructors for every svelte template on your site. This is allows you to dynamically load any component without having to import it explicitly or worry about SSR issues when generating HTML fallbacks.<div><h2>Understanding Component Signatures</h2>Each entry in <code>allLayouts</code> is saved as a "component signature" to ensure uniqueness. The component signature for a template is simply its path with any forward slashes "/" or periods "." converted into underscores "_". For example <code>layouts/components/grid.svelte</code> would become&nbsp;<code>layouts_components_grid_svelte</code>. The signatures are absolute, not relative, so they should always start with "layouts" and end with "svelte".</div><div><h2>Accessing templates in allLayouts</h2>To access a particular template in the <code>allLayouts</code>&nbsp;object, use the component signature with either dot notation (e.g. <code>allLayouts.layouts_components_grid_svelte</code> or bracket notation<code>allLayouts["layouts_components_grid_svelte"]</code>. It\'s common to use variables provided from your JSON data source to target a particular component, so you\'d use bracket notation for that: <code>allLayouts[someVariable]</code> (where "someVariable" is equal to a component signature).</div><div><h2>Dynamic components</h2>Svelte has <a href="https://svelte.dev/tutorial/svelte-component" rel="noopener noreferrer">dynamic components</a> that allows you to load templates without explicitly importing them. Combine this with the <code>allLayouts</code> magic prop and you can have a content driven component architecture where you can add/remove/rearrange components without touching your Svelte templates and it will have complete SSR builds so you still get HTML fallbacks for every component.&nbsp;</div><div><br></div><div>Given a content source that looks like this:</div><div><br><codeblock>{<br>&nbsp;&nbsp;"components": [<br>&nbsp;&nbsp;&nbsp;&nbsp;{"name": "ball"},<br>&nbsp;&nbsp;&nbsp;&nbsp;{"name": "block"}<br>&nbsp;&nbsp;]<br>}</codeblock><br>You could dynamically load the components like this:</div><div><br><codeblock>&lt;script&gt;<br>&nbsp;&nbsp;export let components, allLayouts;<br>&lt;/script&gt;<br><br>{#if components}<br>&nbsp;&nbsp;{#each components as { name }}<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;svelte:component this="{allLayouts["layouts_components_" + name + "_svelte"]}" /&gt;<br>&nbsp;&nbsp;{/each}<br>{/if}</codeblock></div>'}},{pager:null,type:"docs",path:"docs/baseurl",filepath:"content/docs/baseurl.json",filename:"baseurl.json",fields:{title:"Baseurl",group:"Configuration",order:2.5,body:'<h2>Base element</h2>Standard HTML has a <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base" target="_blank" rel="noopener noreferrer">base element</a>&nbsp;that is prepended to all relative URLs and can be used to serve your site from a subfolder (e.g. <code>mysite.com/my-subfolder/</code>), which is common on platforms like&nbsp;<a href="https://about.gitlab.com/stages-devops-lifecycle/pages/" target="_blank" rel="noopener noreferrer">GitLab Pages</a>.<div><h2>Implementation</h2>In your sitewide <code>plenti.json</code> configuration file, you can specify a <code>baseurl</code> like this:</div><div><br><codeblock>{<br>&nbsp;&nbsp;"baseurl": "/my-subfolder/"<br>}</codeblock><br>The local webserver (<code>plenti serve</code><span style="color: var(--base-dark);">)&nbsp;</span><span style="color: var(--base-dark);">will serve the root of your site from that subfolder:&nbsp;</span><a href="http://localhost:3000/my-subfolder/" target="_blank" rel="noreferrer noopener">http://localhost:3000/my-subfolder/</a><span style="color: var(--base-dark);">.</span></div><div><span style="color: var(--base-dark);"><br></span></div><div><span style="color: var(--base-dark);">The baseurl information gets added to a magic variable called env</span><span style="color: var(--base-dark);">&nbsp;that you can add to the&nbsp;</span><code>&lt;head&gt;</code><span style="color: var(--base-dark);"> element like this:</span></div><div><br><codeblock>&lt;script&gt;<br>&nbsp;&nbsp;export let env;<br>&lt;/script&gt;<br><br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;base href="{env.baseurl}"&gt;<br>&lt;/head&gt;</codeblock><br>(<strong>Note:</strong> make sure to first pass <code>env</code> from the parent component, likely <code>layouts/global/html.svelte</code>)</div><div><h2>Usage</h2>Now that your site is configured to use baseurls, you need to make sure you\'re actually using relative links (<code>about</code>), not root relative links (<code>/about</code>) or absolute links (<code>https://mysite.com/about</code>). You\'ll also want to update all links back to your homepage to use a dot <code>.</code> instead of a forward slash <code>/</code>in order to work with the base element correctly when deployed.</div>'}},{pager:null,type:"docs",path:"docs/build",filepath:"content/docs/build.json",filename:"build.json",fields:{title:"Build",group:"Commands",order:4.03,body:'<h2>Description</h2>The build command creates the static assets that can be deployed to hosting provider. It contains the generated Svelte code that hydrates into a Single Page Application (SPA), as well as the HTML fallbacks that allow you to navigate the site without JavaScript enabled, improve Search Engine Optimization (SEO), and speed up the initial page load of your app.<div><h2>Usage</h2>The following command will create a folder called "public" that contains your website: <code>plenti build</code></div><div><h2>Flags</h2></div><table><thead><tr><th>Long</th><th>Short</th><th>Description</th></tr></thead><tbody><tr><td><code>--output=whatever<br></code></td><td><code>-o=whatever<br></code></td><td>Change the name of the "public" build directory to something else.</td></tr><tr><td><code>--benchmark<br></code></td><td><code>-b</code></td><td>Display build time statistics.</td></tr><tr><td><code>--verbose<br></code></td><td><code>-v</code></td><td>Shows log messages related to the build process.</td></tr></tbody></table>'}},{pager:null,type:"docs",path:"docs/cms-config",filepath:"content/docs/cms-config.json",filename:"cms-config.json",fields:{title:"Configuration",group:"CMS",order:8.05,body:'The Plenti CMS is designed to work out-of-the box with zero configuration. It\'s a "Discoverable CMS" that reads your content source and provides a default editing experience that you can use locally or deploy to a remote site and use Continuous Integration (CI) to manage updates. You can define defaults, schemas, and components to progressively enhance your editing experience if you so choose.<div><h2>Creating new content</h2></div><div>If you want to be able to create new content through the CMS, you need to define a <code>_defaults.json</code> within your content type (e.g. <code>content/pages/_defaults.json</code>). The CMS will pick up on this and provide a new option in the admin interface under "Add" in the top navbar. The widgets provided will be based on the types of content you use for your default scaffolding, however you can override these by also defining a <code>_schema.json</code> file for your content type (e.g. <code>content/pages/_schema.json</code>).</div><div><h2>Creating new component content</h2></div><div>Component defaults are defined in a similar manner to content type defaults, however they <i>must</i>&nbsp;go in a special named folded called <code>_components</code> inside your top level content folder&nbsp;(e.g. <code>content/_components/grid/_defaults.json</code>). Components do not get their own pages/endpoints, they only exist within the context of being placed on a particular page. In order to do this, you need a content type (or another component) with a <code>_schema.json</code> file that specifies a component widget for one of its fields:</div><div><br></div><codeblock>{<br>&nbsp; "myfield": {<br>&nbsp; &nbsp; "type": "component",<br>&nbsp; &nbsp; "options": [<br>&nbsp; &nbsp; &nbsp; "hero",<br>&nbsp; &nbsp; &nbsp; "grid",<br>&nbsp; &nbsp; &nbsp; "slider"<br>&nbsp; &nbsp; ]<br>&nbsp; }<br>}</codeblock>'}},{pager:null,type:"docs",path:"docs/cms-media",filepath:"content/docs/cms-media.json",filename:"cms-media.json",fields:{title:"Media",group:"Content",order:8.1,body:"The Plenti CMS provides media management tools so non-technical content editors can upload new images or PDFs and place them on pages as they see fit. All media that you want available in the CMS should be placed in the top-level <code>media</code> folder for your project and if you'd like the discoverable CMS to provide a widget for managing media on a page, you should provide the full media path in your JSON content source (e.g. <code>/media/people/steph.webp</code>).<div></div><div><h2>Filters</h2></div><div>Filters are created automatically based on the folder structure of where the media file is located. This provides a way to quickly narrow down your media results when searching for a particular file. The in-page media widget will automatically apply the appropriate filter when swapping an image for another image in the media library, or uploading a new image from your local computer.</div><div><h2>Deleting Files</h2></div><div>If deleting media files through the admin interface, the CMS makes a best effort to scan your content source for references. Please note, this is for convenience and should not be relied on for making an absolute determination that the file isn't being used - it only picks up on full path media files (like the discoverable CMS), it won't pick up on shorthand that your developer may use to reference files in content and hardcode prefixes / suffixes in their layouts. It will provide a confirmation tooltip for safety, similar to deleting content.</div>"}},{pager:null,type:"docs",path:"docs/cms-setup",filepath:"content/docs/cms-setup.json",filename:"cms-setup.json",fields:{title:"Setup",group:"CMS",order:8.01,body:'In order to add the Plenti CMS to your site you need to use 3 magic variables (<code>content</code>,&nbsp;<code>user</code>, and <code>adminMenu</code><span style="color: var(--base-dark);">) that are provided to you by the Plenti.</span><div><br><div>You have a great deal of flexibility in how to implement these (or not) on your site. Commonly you will add the admin menu to your entrypoint file in a manner similar to this:</div><div><br></div><div><codeblock>&lt;script&gt;<br>&nbsp; export let content, user, adminMenu;<br>&lt;/script&gt;<br><br>&lt;html lang="en"&gt;<br>&nbsp; &lt;head&gt;&lt;/head&gt;<br>&nbsp; &lt;body&gt;<br>&nbsp; &nbsp; {#if user &amp;&amp; $user.isAuthenticated}<br>&nbsp; &nbsp; &nbsp; &lt;svelte:component this={adminMenu} bind:content {user} /&gt;<br>&nbsp; &nbsp;&nbsp;{/if}<br>&nbsp; &nbsp; &lt;main&gt;<br>&nbsp; &nbsp; &nbsp;&nbsp;&lt;svelte:component this={layout} {...content.fields} {user} /&gt;<br>&nbsp; &nbsp; &lt;/main&gt;<br>&nbsp; &lt;/body&gt;<br>&lt;/html&gt;</codeblock></div></div><div><br></div><div>Then on whatever page or popup you want to use to display the login, you can simply add something like this:</div><div><br><codeblock>&lt;button on:click|preventDefault={$user.login()}&gt;<br>&nbsp; Login<br>&lt;/button&gt;</codeblock></div><div><br></div><div>For logout, there\'s a link provided to you by default in the admin menu, but you can implement your own workflow using:<br><br><codeblock>&lt;button on:click|preventDefault={$user.logout()}&gt;<br>&nbsp; Logout<br>&lt;/button&gt;</codeblock></div><div><div><br></div><div>The information above is enough to get you up and running locally. If you make changes through the admin interface, it will update your JSON locally, which you can then commit or discard with Git.<br></div><h2>Remote / Deployed CMS</h2></div><div>If you want to use the CMS on a deployed website, or hand it off to clients who don\'t use Git, you can configure a remote repository in your sitewide <code>plenti.json</code> configuration file:</div><div><br></div><div><codeblock>"cms": {<br>&nbsp;&nbsp;"repo": "https://gitlab.com/my-org/my-repo",<br>&nbsp;&nbsp;"redirect_url": "https://my-site.com",<br>&nbsp;&nbsp;"app_id": "put oauth id here",<br>&nbsp;&nbsp;"branch": "main"<br>}</codeblock></div>'}},{pager:null,type:"docs",path:"docs/eject",filepath:"content/docs/eject.json",filename:"eject.json",fields:{title:"Eject",group:"Commands",order:4.05,body:"<h2>Description</h2>Ejecting is the process of exporting core files so you can customize what Plenti uses in the background to generate your site. This functionality is generally reserved for experienced users that have a specific use case for why the need to do this. If you want to customize your experience this way, just keep in mind that you will no longer receive automatic updates for the ejected project and we can't guarantee that your site will continue to work properly.<div><h2>Usage</h2>You can see all the ejectable files available to you by running <code>plenti eject</code>. This will give you a select list to choose from.</div><div><br></div><div>You can eject a specific file by calling it directly, for example <code>plenti eject router.svelte</code></div>"}},{pager:null,type:"docs",path:"docs/field-widgets",filepath:"content/docs/field-widgets.json",filename:"field-widgets.json",fields:{title:"Field Widgets",group:"CMS",order:9.01,body:'Sometimes you may want to override the default field widgets that are used for editing content. You can do this in the <code>_schema.json</code> file for your content type or component. All field widget overrides use the following format (replace "myfield" with the JSON key from your content source):<div><div><br><div><codeblock>{<br>&nbsp; "myfield": {<br>&nbsp; &nbsp; "type": "",<br>&nbsp; &nbsp; "options": []<br>&nbsp; }<br>}<br></codeblock><div><br></div>Here\'s a list of widget types that ship with the CMS by default:</div></div></div><div><ul><li>text</li><li>number</li><li>boolean</li><li>date</li><li>time</li><li>wysiwyg</li><li>select</li><li>checkbox</li><li>radio</li><li>reference / references</li><li>id</li><li>media</li><li>component</li></ul></div>'}},{pager:null,type:"docs",path:"docs/gitea-actions",filepath:"content/docs/gitea-actions.json",filename:"gitea-actions.json",fields:{title:"Gitea Actions",group:"Deployment",order:5.05,body:'<h2>Description</h2><a href="https://gitea.io/en-us/" target="_blank" rel="noreferrer noopener">Gitea</a>&nbsp;is a <em>free and open source</em>&nbsp;git repository service that you can self-host (similar to GitLab but less moving parts). It does not offer a static website hosting solution out of the box, but you could always implement your own using something like&nbsp;<a href="https://codeberg.org/Codeberg/pages-server" target="_blank" rel="noreferrer noopener">pages-server</a>. Gitea also offers a built-in CI solution that is&nbsp;<a href="https://blog.gitea.io/2022/12/feature-preview-gitea-actions/" target="_blank" rel="noreferrer noopener">compatible with GitHub Actions</a>.<div><br></div><div>You can have your Plenti websites automatically build and deploy to a specific branch in your repo by adding a <code>.gitea/workflows/build.yml</code>&nbsp;file to your project that will run automatically every time you push to your main branch on GitHub.<div><br><codeblock>name:&nbsp;Plenti Build<br>run-name: ${{ github.actor }} deployed to build branch<br>on:<br>&nbsp;&nbsp;push:<br>&nbsp;&nbsp;&nbsp;&nbsp;branches:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- main<br><br>jobs:<br>&nbsp;&nbsp;deploy:<br>&nbsp;&nbsp;&nbsp;&nbsp;runs-on: ubuntu-latest<br>&nbsp;&nbsp;&nbsp;&nbsp;steps:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- uses: actions/checkout@v2<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- name: Build<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uses: docker://plentico/plenti:latest<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;with:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;entrypoint: /plenti<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;args: build&nbsp;--output="temp"<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- name: Deploy<br>&nbsp; &nbsp; &nbsp; &nbsp; run: |<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /usr/bin/git config user.name ${{ github.actor }}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/usr/bin/git config user.email ci@plenti.co<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/usr/bin/git remote rm origin<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/usr/bin/git remote add origin https://x-access-token:${{ secrets.GITEA_TOKEN }}@your-gitea-instance.com/${{ github.repository }}<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;/usr/bin/git add -A<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;/usr/bin/git commit -m "Commit temp folder."<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;/usr/bin/git push origin `git subtree split --prefix temp master`:prod --no-verify --force&nbsp;</codeblock><div><br></div><br></div></div>'}},{pager:null,type:"docs",path:"docs/github-actions",filepath:"content/docs/github-actions.json",filename:"github-actions.json",fields:{title:"GitHub Actions",group:"Deployment",order:5.01,body:"<h2>Description</h2><a href=\"https://pages.github.com/\">GitHub Pages</a> is a <em>free</em> hosting service integrated directly with GitHub. You can have your Plenti websites automatically deploy to GitHub Pages by adding a <code>.github/workflows/gh-pages.yml</code>&nbsp;file to your project to automatically build and deploy your website every time you push to your master branch on GitHub.<div><br><codeblock>name: github pages<br><br>on:<br>&nbsp;&nbsp;push:<br>&nbsp;&nbsp;&nbsp;&nbsp;branches:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- master<br><br>jobs:<br>&nbsp;&nbsp;deploy:<br>&nbsp;&nbsp;&nbsp;&nbsp;runs-on: ubuntu-18.04<br>&nbsp;&nbsp;&nbsp;&nbsp;steps:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- uses: actions/checkout@v2<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- name: Build<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uses: docker://plentico/plenti:latest<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;with:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;entrypoint: /plenti<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;args: build<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- name: Deploy<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uses: JamesIves/github-pages-deploy-action@releases/v3<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;with:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BRANCH: gh-pages<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FOLDER: public</codeblock><div><br></div>Or if your project requires additional NPM packages, you can use the NodeJS required build instead:</div><div><br><codeblock>name: github pages<br><br>on:<br>&nbsp;&nbsp;push:<br>&nbsp;&nbsp;&nbsp;&nbsp;branches:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- master<br><br>jobs:<br>&nbsp;&nbsp;deploy:<br>&nbsp;&nbsp;&nbsp;&nbsp;runs-on: ubuntu-18.04<br>&nbsp;&nbsp;&nbsp;&nbsp;steps:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- uses: actions/checkout@v2<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- name: Setup Node<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uses: actions/setup-node@v2-beta<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;with:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node-version: '13'<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- name: Download Plenti<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;run: wget -c $(curl -s https://api.github.com/repos/plentico/plenti/releases/latest | grep -o 'http.*Linux_64-bit.tar.gz')<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- name: Unpack Plenti<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;run: tar -zxvf *_Linux_64-bit.tar.gz<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- name: Install node packages<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;run: npm install<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- name: Build<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;run: ./plenti build<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- name: Deploy<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uses: JamesIves/github-pages-deploy-action@releases/v3<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;with:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BRANCH: gh-pages<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FOLDER: public</codeblock></div>"}},{pager:null,type:"docs",path:"docs/gitlab-piplines",filepath:"content/docs/gitlab-piplines.json",filename:"gitlab-piplines.json",fields:{title:"GitLab Pipelines",group:"Deployment",order:5.02,body:'<h2>Description</h2><a href="https://about.gitlab.com/stages-devops-lifecycle/pages/">GitLab Pages</a> is a <em>free</em> hosting service integrated directly with GitLab. You can have your Plenti websites automatically deploy to GitLab Pages by adding a <code>.gitlab-ci.yml</code>&nbsp;file to your project to automatically build and deploy your website every time you push to your master branch on GitLab.<div><br></div><div>Unfortunately GitLab has&nbsp;<a href="https://github.com/plentico/plenti/issues/180" target="_blank" rel="noreferrer noopener">a bug</a>&nbsp;that is preventing us from using the&nbsp;<a href="https://hub.docker.com/orgs/plentico" target="_blank" rel="noreferrer noopener">official Docker image</a>&nbsp;for the project like you\'d expect:&nbsp;<br><div><br><codeblock>image:<br>&nbsp;&nbsp;name: plentico/plenti:latest<br>&nbsp;&nbsp;entrypoint: [""]<br><br>pages:<br>&nbsp;&nbsp;script:<br>&nbsp;&nbsp;&nbsp;&nbsp;- /plenti build<br>&nbsp;&nbsp;artifacts:<br>&nbsp;&nbsp;&nbsp;&nbsp;paths:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- public<br>&nbsp;&nbsp;only:<br>&nbsp;&nbsp;&nbsp;&nbsp;- master</codeblock><div><br></div><div>So for now we have a temporary workaround you can use:<br></div></div></div><div><br></div><codeblock>image: docker:stable<br><br>pages:<br>&nbsp; before_script:<br>&nbsp; &nbsp; - apk add --update curl wget &amp;&amp; rm -rf /var/cache/apk/*<br>&nbsp; script:<br>&nbsp; &nbsp; - wget -c $(curl -s https://api.github.com/repos/plentico/plenti/releases/latest | grep -o \'http.*Linux_64-bit.tar.gz\')<br>&nbsp; &nbsp; - tar -zxvf *_Linux_64-bit.tar.gz<br>&nbsp;&nbsp;&nbsp;&nbsp;- /plenti build<br>&nbsp;&nbsp;artifacts:<br>&nbsp;&nbsp;&nbsp;&nbsp;paths:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- public<br>&nbsp;&nbsp;only:<br>&nbsp;&nbsp;&nbsp;&nbsp;- master</codeblock>'}},{pager:null,type:"docs",path:"docs/installation",filepath:"content/docs/installation.json",filename:"installation.json",fields:{title:"Installation",group:"Getting Started",order:.02,body:'<h2>Requirements</h2><s>You must have <a href="https://nodejs.org" target="_blank" rel="noopener noreferrer">NodeJS</a> version 13 or newer.</s><br>As of <code>v0.2.0</code> you no longer need NodeJS, Go, or any dependency other than Plenti itself.<div><h2>Homebrew (Mac)</h2>1. Add the tap: <code>brew tap plentico/homebrew-plenti</code><br>2. Install: <code>brew install plenti</code></div><div><h2>Snap (Linux)</h2>1. Install: <code>snap install plenti</code></div><div><h2>Scoop (Windows)</h2>Windows is not yet supported, it needs <a href="https://github.com/plentico/plenti/issues/45" target="_blank" rel="noopener noreferrer">your help</a>!<br>1. Add the bucket: <code>scoop bucket add plenti https://github.com/plentico/scoop-plenti</code><br>2. Install: <code>scoop install plenti</code></div><div><h2>Manual</h2>1. Download the latest <a href="https://github.com/plentico/plenti/releases">release</a><br>2. Move it somewhere in your <code>PATH</code> (most likely <code>/usr/local/bin</code>)</div>'}},{pager:null,type:"docs",path:"docs/layout",filepath:"content/docs/layout.json",filename:"layout.json",fields:{title:"Layout",group:"Structure",deprecated:"<code>layout</code> has become <code>layouts</code>, see: <a href='/docs/layouts'>details</a>.",order:2.01,body:"Svelte<br>All the templating is done in the \"disappearing\" JS component framework called <a href='https://svelte.dev/'>Svelte</a>.Svelte offers a simplified syntax and creates a welcoming developer experience for folks coming directly from an HTML/CSS background.It also offers some performance benefits over similar frameworks since it doesn't require a virtual DOM and its runtime is rather small.layout/global/html.svelte<br>The <code>layout/global/html.svelte</code> file is important and changing its name will break your app.You could also potentially break your routing if you're not careful with <code>&lt;svelte:component this={route} {...node.fields} {allNodes} /&gt;</code>.Once you're aware of those two things, this file shouldn't be too scary and is meant for you to customize.layout/content/<br>Files that live in this folder correspond directly to the types defined in your content source.For example if you have <em>blog</em> type (<code>content/blog/post-whatever.json</code>) you would create a corresponding template at <code>layout/content/blog.svelte</code>.One template should be used per type and it will feed many content files to create individual nodes (endpoints).The rest of the structure is really up to you.We try to create logical default folders, such as <code>layout/components/</code> for reusable widgets and <code>layout/scripts/</code> for helper functions,but feel free to completely change these and make the structure your own."}},{pager:null,type:"docs",path:"docs/layouts",filepath:"content/docs/layouts.json",filename:"layouts.json",fields:{title:"Layouts",group:"Structure",order:2.01,body:'<h2>Svelte</h2>All the templating is done in a reactive UI component framework called <a href="https://svelte.dev/">Svelte</a>. Svelte offers a simplified syntax and creates a welcoming developer experience for folks coming directly from an HTML/CSS background. It also offers some performance benefits over similar frameworks since it doesn\'t require a virtual DOM and its runtime is rather small.<div><h2>layouts/global/html.svelte</h2>The <code>layouts/global/html.svelte</code> file is important and changing its name will break your app. You could also potentially break your routing if you\'re not careful with <code>&lt;svelte:component this={layout} {...content.fields} {allContent} /&gt;</code>. Once you\'re aware of those two things, this file shouldn\'t be too scary and is meant for you to customize.</div><div><br></div><div><span style="color: var(--base-dark);">It is common practice (but not required) to use a </span><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax" target="_blank" rel="noopener noreferrer">JS spread operator</a><span style="color: var(--base-dark);"> </span><code>{...content.fields}</code><span style="color: var(--base-dark);"> inside a </span><a href="https://svelte.dev/tutorial/svelte-component" target="_blank" rel="noopener noreferrer">dynamic component</a><span style="color: var(--base-dark);"> </span><code>&lt;svelte:component this={layout}/&gt;</code><span style="color: var(--base-dark);"> in your </span><code>layouts/global/html.svelte</code><span style="color: var(--base-dark);"> file to make the keys you define in your content source easier to access. That resolves routes without requiring you to manually check them and load the corresponding layout and allows you to access keys defined in your content source directly at the top level of your </span><code>layouts/content/YOUR_TYPE.svelte</code><span style="color: var(--base-dark);"> templates like:</span><br></div><div><br><codeblock>&lt;script&gt;<br>&nbsp;&nbsp;export let title;<br>&lt;/script&gt;<br><br>&lt;h1&gt;{title}&lt;/h1&gt;</codeblock><h2>layouts/content/</h2>Files that live in this folder correspond directly to the types defined in your content source. For example if you have <em>blog</em> type (<code>content/blog/post-whatever.json</code>) you would create a corresponding template at <code>layouts/content/blog.svelte</code>. One template should be used per type and it will feed many content files to create individual nodes (endpoints).</div><div><br></div><div>The rest of the structure is really up to you. We try to create logical default folders, such as <code>layouts/components/</code> for reusable widgets and <code>layouts/scripts/</code> for helper functions, but feel free to completely change these and make the structure your own.</div>'}},{pager:null,type:"docs",path:"docs/media",filepath:"content/docs/media.json",filename:"media.json",fields:{title:"Media",group:"Structure",order:2.02,body:'Media files like images and PDFs can be stored in the top level <code>media/</code> directory. Only store files here that you intend content editors to be able to change. This folder hooks into the CMS in order to provide a media browser that can be manipulated through the admin interface.<div><h2>Accessing media in Layouts</h2></div><div>In general you want to reference media in your JSON content and then access it from the <code>content</code> prop to display it in your template in a dynamic way that can be changed by editors. You <i>could</i> reference these assets directly from your templates (e.g.&nbsp;<code>&lt;img src="/media/my-image.jpg" /&gt;</code>)&nbsp;<span style="color: var(--base-dark);">or use a relative path (e.g. if you were adding an image to</span><code>layouts/components/my-component.svelte</code><span style="color: var(--base-dark);">,&nbsp; you could reference the same image like</span><code>&lt;img src="../../media/my-image.jpg" /&gt;</code><span style="color: var(--base-dark);">). However, if your intention is to hardcode an asset in your template that editors can\'t change, you\'d be better served using the top-level <code>static/</code> folder instead.</span><div><h2>Media Browser</h2>When referencing assets in your JSON content source, you should use the full path (e.g. <code>media/path/to/file.jpg</code>) instead of just the filename and then hardcoding the prefex and suffix in your template. This allows the Plenti CMS to recognize the file as an asset and gives you a widget for interacting with the Media Browser to change assetsor upload new ones.</div><div><h2>Filtering</h2></div><div>The nested folder structure you use inside your top-level assets folder becomes the filtering mechanism of the Media Browser. This can be used for narrowing down results in the Library view or setting the path of new files in the Upload view. Note that only folders with a file inside of them will appear this way (similar to how Git doesn\'t tracking empty folders).</div></div>'}},{pager:null,type:"docs",path:"docs/new-site",filepath:"content/docs/new-site.json",filename:"new-site.json",fields:{title:"New Site",group:"Commands",order:4.01,body:'<h2>Description</h2>This is the first command you\'ll want to run for a new project. It creates the default folders and files for your website.<div><h2>Usage</h2>You can create a new project by running <code>plenti new site YOUR_SITE_NAME</code>.</div><div><h2>Flags</h2></div><table><thead><tr><th>Long</th><th>Short</th><th>Description</th></tr></thead><tbody><tr><td><code>--bare<br></code></td><td><code>-b</code></td><td>Creates a minimalist site scaffolding with less default content.</td></tr><tr><td><code>--theme="https://github.com/user/repo"<br></code></td><td><code>-t="https://github.com/user/repo"<br></code></td><td>Point to a Git repository to use a base theme for your site.</td></tr></tbody></table>'}},{pager:null,type:"docs",path:"docs/new-type",filepath:"content/docs/new-type.json",filename:"new-type.json",fields:{title:"New Type",group:"Commands",order:4.02,body:'<h2>Description</h2>This command will automatically create a folder in your <code>content/</code> directory with the type name, a <code>_blueprint.json</code> file inside that folder that describes the type\'s field structure, and a corresponding template in <code>layouts/content/</code> that has the same name as the type.<div><h2>Usage</h2>You can create a new content type by running <code>plenti new type YOUR_NEW_TYPE</code>.</div><div><h2>Flags</h2></div><table><thead><tr><th>Long</th><th>Short</th><th>Description</th></tr></thead><tbody><tr><td><code>--endpoint=true</code></td><td><code>-e=true</code></td><td>Pass "false" if you don\'t want your new type to have an endpoint that site visitors can access directly</td></tr><tr><td><code>--single=false</code></td><td><code>-s=false</code></td><td>Pass "true" if you want your new type to be a one-off route that is different structurally from other content</td></tr></tbody></table>'}},{pager:null,type:"docs",path:"docs/pagination",filepath:"content/docs/pagination.json",filename:"pagination.json",fields:{title:"Pagination",group:"Configuration",order:2.55,body:'<h2>What is pagination?</h2>Sometimes you want to aggregate many individual pieces of content onto a single page. This is common for things like blog posts and event pages; there are many individual nodes, but one landing page that collects them all so people can browse what is available. If there are too many items to display on a single page, often times they are broken up into individual pages that people can cycle through by clicking a "next" or "previous" button (a pager). This increments the current page and loads a new set of items while clearing out the previous set.<div><h2>Implementation</h2>In your sitewide <code>plenti.json</code> configuration file, you can create pagination, for your homepage for example, like this:</div><div><br><codeblock>{<br>&nbsp;&nbsp;"routes": {<br>&nbsp;&nbsp;&nbsp;&nbsp;"index": ":paginate(totalPages)"<br>&nbsp;&nbsp;}<br>}</codeblock><br>The value of <code>totalPages</code> in this example <em>must</em> be defined in the template for this route, which in this case is <code>layouts/content/index.svelte</code>. You have complete flexibility to set up your pagination to work in any way that you see fit. We don\'t force you to use any particular pattern, at build time we simply evaluate the value of whatever variable name you put in your route to determine how many server rendered pages you need. For example you might create pagination in your template to work with the route specified above like this:</div><div><br><codeblock>&lt;script&gt;<br>&nbsp;&nbsp;import Grid from \'../components/grid.svelte\';<br>&nbsp;&nbsp;import Pager from \'../components/pager.svelte\';<br>&nbsp;&nbsp;export let content, allContent;<br><br>&nbsp;&nbsp;$: currentPage = content.pager ? content.pager : 1;<br>&nbsp;&nbsp;let postsPerPage = 3;<br>&nbsp;&nbsp;let allPosts = allContent.filter(content =&gt; content.type == "blog");<br>&nbsp;&nbsp;let totalPosts = allPosts.length;<br>&nbsp;&nbsp;let totalPages = Math.ceil(totalPosts / postsPerPage); <strong>// This is the variable you set in your route</strong><br>&nbsp;&nbsp;$: postRangeHigh = currentPage * postsPerPage;<br>&nbsp;&nbsp;$: postRangeLow = postRangeHigh - postsPerPage;<br>&lt;/script&gt;<br><br>&lt;Grid {allPosts} {postRangeLow} {postRangeHigh} /&gt;<br>&lt;Pager {currentPage} {totalPages} /&gt;</codeblock><br>(<strong>Note:</strong> the <code>content.pager</code> ships with each node on your site to help keep track of which page you\'re on)</div><div><h2>Displaying paged items</h2>To display the correct items, you\'ll want to check if the position of the current post is within the expected range of the items that should be displayed. Keeping with the example above, you could create a <code>layouts/components/grid.svelte</code> file that looks something like this:</div><div><br><codeblock>&lt;script&gt;<br>&nbsp;&nbsp;export let allPosts, postRangeLow, postRangeHigh;<br>&lt;/script&gt;<br><br>&lt;div class=\'grid\'&gt;<br>&nbsp;&nbsp;{#each allPosts as post, i}<br>&nbsp;&nbsp;&nbsp;&nbsp;{#if i &gt;= postRangeLow &amp;&amp; i &lt; postRangeHigh}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;a class=\'grid-item\' href=\'{post.path}\'&gt;{post.fields.title}&lt;/a&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;{/if}<br>&nbsp;&nbsp;{/each}<br>&lt;/div&gt;</codeblock><h2>Creating a pager</h2>The pager is the actual controls used to navigate forward and backward through the paged output. You have ultimate flexibility of how this is implemented, but it might look something like this:</div><div><br><codeblock>&lt;script&gt;<br>&nbsp;&nbsp;export let currentPage, totalPages;<br>&lt;/script&gt;<br><br>&lt;ul&gt;<br>&nbsp;&nbsp;{#if currentPage &gt; 1}<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a href=\'.\'&gt;first&lt;/a&gt;&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a href=\'{currentPage - 1}\'&gt;prev&lt;/a&gt;&lt;/li&gt;<br>&nbsp;&nbsp;{:else}<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;span&gt;first&lt;/span&gt;&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;span&gt;prev&lt;/span&gt;&lt;/li&gt;<br>&nbsp;&nbsp;{/if}<br>&nbsp;&nbsp;{#each [3,2,1] as i}<br>&nbsp;&nbsp;&nbsp;&nbsp;{#if currentPage - i &gt; 0}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a href="{currentPage - i}"&gt;{currentPage - i}&lt;/a&gt;&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;{/if}<br>&nbsp;&nbsp;{/each}<br>&nbsp;&nbsp;&lt;li&gt;&lt;span&gt;{currentPage}&lt;/span&gt;&lt;/li&gt;<br>&nbsp;&nbsp;{#each Array(3) as _, i}<br>&nbsp;&nbsp;&nbsp;&nbsp;{#if currentPage + (i+1) &lt;= totalPages}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a href="{currentPage + (i+1)}"&gt;{currentPage + (i+1)}&lt;/a&gt;&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;{/if}<br>&nbsp;&nbsp;{/each}<br>&nbsp;&nbsp;{#if currentPage &lt; totalPages}<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a href="{currentPage + 1}"&gt;next&lt;/a&gt;&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a href="{totalPages}"&gt;last&lt;/a&gt;&lt;/li&gt;<br>&nbsp;&nbsp;{:else}<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;span&gt;next&lt;/span&gt;&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;span&gt;last&lt;/span&gt;&lt;/li&gt;<br>&nbsp;&nbsp;{/if}<br>&lt;/ul&gt;</codeblock></div>'}},{pager:null,type:"docs",path:"docs/params",filepath:"content/docs/params.json",filename:"params.json",fields:{title:"params",group:"Magic Variables",order:3.05,body:"<h2>Description</h2>The <code>params</code> variable is a default prop loaded by the Plenti generator automatically. It holds all the key/value pairs from the query string (everything after a <code>?</code>) of the URL in a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\" rel=\"noopener noreferrer\">URLSearchParams</a> object. This can be helpful when interacting with APIs that use callback URLs with specific parameters.<div><h2>Getting values out of params</h2>The <strong>params</strong> prop won't work with server-side rendering (SSR) so you need to check if the params are available first, before trying to use them. If you have a URL like&nbsp;<code>http://localhost:3000/?cat=nemo&amp;dog=pepper</code>, you could access those values in your template like this:<br><br><codeblock>{#if params}<br>&nbsp;&nbsp;{params.get('cat')}<br>&nbsp;&nbsp;{params.get('dog')}<br>{/if}</codeblock></div>"}},{pager:null,type:"docs",path:"docs/paths",filepath:"content/docs/paths.json",filename:"paths.json",fields:{title:"Paths",group:"Content",order:1.02,body:'<h2>Endpoints</h2>The endpoint nodes for your pages (of whatever type) will be defined by your data source. By default this corresponds to the structure of folders and files in your <code>content/</code> folder, for example:<ul><li><code>content/index.json</code> = <code>https://example.com/</code></li><li><code>content/blog/post1.json</code> = <code>https://example.com/blog/post1</code></li><li><code>content/events/My_Event.json</code> = <code>https://example.com/events/my-event</code></li></ul>If you want to have a content source without a path (no node endpoint that site visitors can access), simply delete the corresponding svelte template in <code>layouts/content/</code>. You can do this automatically use the "endpoint" flag when creating a new type, for example:&nbsp;<code>plenti new type YOUR_TYPE --endpoint=false</code><br><h2>Overriding Paths</h2>You can overide the default path structure in the site\'s configuration file (<code>plenti.json</code>). For example if you had a type called <code>pages</code> and you wanted it to appear at the top level of the site and not in the format <code>https://example.com/pages/page1</code>, you could add the following to <code>plenti.json</code>:<br><br><codeblock>"routes": {<br>&nbsp;&nbsp;"pages": "/:filename"<br>}</codeblock><br>This would allow a content file located at <code>content/pages/page1.json</code> to appear in the following format: <code>https://example.com/page1</code>.<div><br></div><div>You can use any custom key that you define in your content source, e.g. <code>:title</code>, <code>:date</code>, etc. in your path, for example:<br><br><codeblock>"routes": {<br>&nbsp;&nbsp;"blog": "/blog/:fields(author)/:fields(title)"<br>}</codeblock></div>'}},{pager:null,type:"docs",path:"docs/serve",filepath:"content/docs/serve.json",filename:"serve.json",fields:{title:"Serve",group:"Commands",order:4.04,body:'<h2>Description</h2>Starts up a lightweight webserver you can use for local development. This will run the build in the background when you first run the command, and any time that you change a file in your <code>content/</code> or<code>layouts/</code> folders.<div><h2>Usage</h2>You can start the server by running <code>plenti serve</code> from inside your project\'s root folder.</div><div><h2>Flags</h2></div><table><thead><tr><th>Long</th><th>Short</th><th>Description</th></tr></thead><tbody><tr><td><code>--build=true<br></code></td><td><code>-b=true</code></td><td>Set to "false" to disable the build step and use existing "public" directory.</td></tr><tr><td><code>--output=public<br></code></td><td><code>-o=public<br></code></td><td>Change the name of the build directory.</td></tr></tbody><tbody><tr><td><code>--port=3000<br></code></td><td><code>-p=3000<br></code></td><td>Change the port for the local webserver. This can be helpful when running multiple websites at the same time.</td></tr><tr><td><code>--in-memory<br></code></td><td><code>-M</code></td><td>Keep files in memory instead of writing to filesystem. Speeds up subsequent builds for local dev.</td></tr></tbody><tbody><tr><td><code>--live-reload<br></code></td><td><code>-L</code></td><td>Automatically refreshes your browser when saving local development changes.</td></tr><tr><td><code>--ssl<br></code></td><td><code>-s</code></td><td>Add SSL/TLS cert to test your local environment over HTTPS.</td></tr></tbody></table>'}},{pager:null,type:"docs",path:"docs/theme-add",filepath:"content/docs/theme-add.json",filename:"theme-add.json",fields:{title:"Theme Add",group:"Theme Commands",order:4.06,body:'<h2>Description</h2>Downloads a new theme from a git repository. This will make an entry in <code>plenti.json</code>&nbsp;to keep track of the remote URL you downloaded the theme from, as well as the commit that was used (defaults to latest commit). It also removes any references to git in the downloaded folder for the theme to avoid problems with git submodules.<br><br><strong>Note</strong>: The "theme add" command does not enable the theme, for that see <a href="/docs/theme-enable">theme enable</a>.<div><h2>Usage</h2>You can download a theme from a git repository by running <code>plenti theme add GIT_URL</code>.</div><div><h2>Flags</h2></div><table><thead><tr><th>Long</th><th>Short</th><th>Description</th></tr></thead><tbody><tr><td><code>--commit<br></code></td><td><code>-c</code></td><td>Download the theme at a specific commit in its git history (allows you to get a specific version of the theme)</td></tr></tbody></table>'}},{pager:null,type:"docs",path:"docs/theme-disable",filepath:"content/docs/theme-disable.json",filename:"theme-disable.json",fields:{title:"Theme Disable",group:"Theme Commands",order:4.08,body:'<h2>Description</h2>Disables a previously enabled theme that has an existing "theme" entry in <code>plenti.json</code>. This command simply removes that entry, but you could easily do this manually if you\'d like.<div><h2>Usage</h2>Disable a theme with <code>plenti theme disable THEME_FOLDER_NAME</code>.</div>'}},{pager:null,type:"docs",path:"docs/theme-enable",filepath:"content/docs/theme-enable.json",filename:"theme-enable.json",fields:{title:"Theme Enable",group:"Theme Commands",order:4.07,body:'<h2>Description</h2>Enables an already downloaded theme that lives in your "themes" folder by simply making a "theme" entry in <code>plenti.json</code>. You can do this entirely manually if you\'d like: copy a Plenti site from any source intoyour "themes" folder (for example <code>themes/my-theme</code>) then in&nbsp;<code>plenti.json</code> add <code>"theme": "my-theme"</code>.<div><h2>Usage</h2>Enable a theme with <code>plenti theme enable THEME_FOLDER_NAME</code>.</div>'}},{pager:null,type:"docs",path:"docs/theme-remove",filepath:"content/docs/theme-remove.json",filename:"theme-remove.json",fields:{title:"Theme Remove",group:"Theme Commands",order:4.1,body:'<h2>Description</h2>Completely deletes an existing theme. This command will delete your theme from the "themes" folder and remove the corresponding entry from the "theme_config" declaration in your <code>plenti.json</code> file. You can perform these actions manually to achieve the same result.<br><br><strong>Note</strong>: This will not disable your theme if you are removing a theme that is currently in use. You need to do that separately to avoid breaking your build.<div><h2>Usage</h2>Remove a theme completely from your project with <code>plenti theme remove THEME_FOLDER_NAME</code>.</div>'}},{pager:null,type:"docs",path:"docs/theme-update",filepath:"content/docs/theme-update.json",filename:"theme-update.json",fields:{title:"Theme Update",group:"Theme Commands",order:4.09,body:"<h2>Description</h2>Downloads the newest version of an existing theme. This command will only work if you used the <code>theme add</code> command originally to add the theme or you manually added <code>theme_config</code> information (url and commit) to <code>plenti.json</code>.<div><h2>Usage</h2>Update a theme by running <code>plenti theme update THEME_FOLDER_NAME</code>.</div><div><h2>Flags</h2></div><table><thead><tr><th>Long</th><th>Short</th><th>Description</th></tr></thead><tbody><tr><td><code>--commit<br></code></td><td><code>-c</code></td><td>Update the theme to specific commit (or revert theme to an older commit).</td></tr></tbody></table>"}},{pager:null,type:"docs",path:"docs/themes",filepath:"content/docs/themes.json",filename:"themes.json",fields:{title:"Themes",group:"Structure",order:2.03,body:'<h2>Description</h2>The "themes" folder holds other projects that your project will inherit assets, content,and layouts from. You can <code>add</code>, <code>remove</code>, <code>enable</code><code>disable</code>, and <code>update</code> themes through the CLI.<br><br>Every Plenti website can be used as a theme - in fact there is nothing special you would doto your site to make it a "theme." Simply nest any Plenti site (if you have permission) in the "themes" folder of your project and specify its folder name as the <code>theme</code> key in <code>plenti.json</code>.<div><h2>Omitting assets, content, or layouts from a theme</h2>By default you inherit <em>everything</em> from the parent theme, but you can choose not to inherit particular aspects if you\'d like. For example, you may want to use components from the "layouts" folder, but don\'t want to use any of the content or images. You could do that in <code>plenti.json</code>&nbsp;like the following example (uses this website as the theme):</div><div>&nbsp; <br><codeblock>"theme": plenti.co,<br>"theme_config": {<br>&nbsp;&nbsp;"plenti.co": {<br>&nbsp;&nbsp;&nbsp;&nbsp;"url": "git@github.com:plentico/plenti.co",<br>&nbsp;&nbsp;&nbsp;&nbsp;"commit": "0eff8c7",<br>&nbsp;&nbsp;&nbsp;&nbsp;"exclude": ["content", "assets"]<br>}</codeblock></div>'}},{pager:null,type:"docs",path:"docs/types",filepath:"content/docs/types.json",filename:"types.json",fields:{title:"Types",group:"Content",order:1.01,body:'<h2>Data Source</h2>The <code>content/</code> folder in a project is where all your data lives (in JSON format). This is typically divided into multiple subfolders that define your types. Types are just a way to group content of a similar structure. Individual files inside a type are very flexible, in fact you can define any field schema you\'d like and there are no required keys. Even though files may be grouped together as a type, they can actually have variability between them in terms of their field structure - just make sure you account for this in your corresponding <code>layouts/content/</code> files!<div><h2>Accessing content in layouts</h2>Any user defined fields in your json files are accessed by the <code>content.fields</code> prop in your layouts. The top level content prop has the following defined keys that are available for all content sources:<ul><li><code>content.pager</code></li><li><code>content.type</code></li><li><code>content.path</code></li><li><code>content.filepath</code></li><li><code>content.filename</code></li><li><code>content.fields</code></li></ul><h2>Single file types</h2>Anything that appears at the first level within the content folder is a type. This can include single files such as <code>index.json</code> and <code>404.json</code>, which are also types, but only have a one-off data source. You can define your own single file types this way if you\'d like. You can also generate a single type using the CLI: <code>plenti new type YOUR_TYPE --single=true</code></div><div><h2>Defaults</h2>There is an optional, specially named file that goes inside your individual type folders named <code>_defaults.json</code>. This defines the default content for that specific type. The Plenti Git-CMS uses this to create new content of a particular type. If you have a type that you don\'t want editors to be able to add new instances of,&nbsp; simply omit the <code>_defaults.json</code> file. Note that <code>--single</code> content is not meant to be repeated and does not have a corresponding blueprint file.</div><div><h2>Schema</h2></div><div>There is anther optional, specially named file that goes inside your individual type folders named&nbsp;<code>_schema.json</code>. This can be used to override the field widgets of the content editor. If you want to override the widgets being used by&nbsp;<span style="color: var(--base-dark);">a</span><span style="color: var(--base-dark);">&nbsp;</span><code>--single</code><span style="color: var(--base-dark);">&nbsp;type, simply prefix "_schema" to the front of the file (for example</span><span style="color: var(--base-dark);">&nbsp;</span><code>_schema_index.json</code><span style="color: var(--base-dark);">&nbsp;).</span></div>'}},{pager:null,type:"docs",path:"docs/upgrading",filepath:"content/docs/upgrading.json",filename:"upgrading.json",fields:{title:"Upgrading",group:"Getting Started",order:.03,body:'<h2>Homebrew (Mac)</h2><code>brew upgrade plenti</code><div><h2>Snap (Linux)</h2>Snaps will update automatically! If you want to force a snap update to the latest version, you can do the following:<br><code>snap refresh plenti</code></div><div><h2>Scoop (Windows)</h2>Windows is not yet supported, it needs <a href="https://github.com/plentico/plenti/issues/45" target="_blank" rel="noopener noreferrer">your help</a>!<br><code>scoop upgrade plenti</code></div><div><h2>Manual</h2>1. Download the latest <a href="https://github.com/plentico/plenti/releases">release</a><br>2. Replace the existing file in your <code>PATH</code> (most likely <code>/usr/local/bin</code>)</div>'}},{pager:null,type:"pages",path:"/about",filepath:"content/pages/about.json",filename:"about.json",fields:{title:"About Plenti",description:["Plenti is a minimalist <a href='https://jamstack.org/' target='blank' rel='noopener noreferrer'>JAMstack</a> framework that's flexible and easy to use.","We've cut out as many dependencies as possible so you can focus on being productive instead of wrestling with a complicated toolchain.","The <a href='https://svelte.dev/' target='blank' rel='noopener noreferrer'>Svelte</a> frontend <em>cuts weight</em> so users get a snappy experience, even with bad internet connections or underpowered devices.","The <a href='https://golang.org/' target='blank' rel='noopener noreferrer'>Go</a> backend <em>cuts wait</em> so apps build faster allowing devs to get more done and editors to get realtime feedback on content changes.","Thanks for taking a look!"],author:"Jim Fisk"}},{pager:null,type:"pages",path:"/contact",filepath:"content/pages/contact.json",filename:"contact.json",fields:{title:"Contact",description:["Plenti is 100% free and open source!","You can fork it for your own purposes, or help us out by reporting bugs / contributing code on <a href='https://github.com/plentico/plenti' target='blank' rel='noopener noreferrer'>Our GitHub</a>."],author:"Jim Fisk"}},{pager:null,type:"pages",path:"/download",filepath:"content/pages/download.json",filename:"download.json",fields:{title:"Download",os:[{title:"Mac",img:"mac.svg"},{title:"Windows",img:"windows.svg"},{title:"Linux",img:"linux.svg"}],meta:{desc:"Download the latest version of the Plenti Svelte static site generator",keywords:"install, download, binary, package manager, brew, snap, scoop"}}},{pager:null,type:"pages",path:"/login.svelte",filepath:"content/pages/login.svelte",filename:"login.svelte",fields:{title:"Login",description:[],login:!0,author:"Jim Fisk"}},{pager:null,type:"pages",path:"/themes",filepath:"content/pages/themes.json",filename:"themes.json",fields:{title:"Themes",themes:!0,upcoming_themes:["aerial.png","educenter.png","fresh.png","hargo.png","influencer.png","navigator.png","radiation.png","restaurant.png","universal.png"],meta:{desc:"Themes for your static Svelte websites",keywords:"Themes, Theming, Inherit, Layout, Svelte"}}},{pager:null,type:"themes",path:"themes/bigspring",filepath:"content/themes/bigspring.json",filename:"bigspring.json",fields:{name:"Bigspring",built_by:"Jantcu",designed_by:"Themefisher"}},{pager:null,type:"themes",path:"themes/compendium",filepath:"content/themes/compendium.json",filename:"compendium.json",fields:{name:"Compendium",built_by:"roobyz",designed_by:"roobyz"}},{pager:null,type:"themes",path:"themes/fitlife",filepath:"content/themes/fitlife.json",filename:"fitlife.json",fields:{name:"Fitlife",built_by:"jamestagal",designed_by:"codewithsadee"}},{pager:null,type:"themes",path:"themes/maxim",filepath:"content/themes/maxim.json",filename:"maxim.json",fields:{name:"Maxim",built_by:"claxxmoldii",designed_by:"BootstrapMade"}},{pager:null,type:"themes",path:"themes/papermod",filepath:"content/themes/papermod.json",filename:"papermod.json",fields:{name:"Papermod",built_by:"claxxmoldii",designed_by:"adityatelange"}},{pager:null,type:"themes",path:"themes/personal-portfolio",filepath:"content/themes/personal-portfolio.json",filename:"personal-portfolio.json",fields:{name:"Personal Portfolio",built_by:"jamestagal",designed_by:"CodingNepal"}},{pager:null,type:"themes",path:"themes/roxo",filepath:"content/themes/roxo.json",filename:"roxo.json",fields:{name:"Roxo",built_by:"Jantcu",designed_by:"StaticMania"}},{pager:null,type:"themes",path:"themes/userbase",filepath:"content/themes/userbase.json",filename:"userbase.json",fields:{name:"Userbase",built_by:"Jantcu",designed_by:"smallbets"}}];export default allContent