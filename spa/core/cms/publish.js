import{env}from"../../generated/env.js";import{makeUrl}from"./url_checker.js";const repoUrl=makeUrl(env.cms.repo),apiBaseUrl=`${repoUrl.origin}/api/v4`,capitalizeFirstLetter=e=>e.charAt(0).toUpperCase()+e.slice(1);export async function publish(e,t,n,s,o){let i;const c=new Promise(e=>{o.subscribe(t=>{i=t,e()})});if(await c,!i.isAuthenticated)throw new Error("Authentication required");const l=repoUrl.pathname.slice(1),d=`${apiBaseUrl}`+`/projects/${encodeURIComponent(l)}`+"/repository/commits",u={"Content-Type":"application/json",Authorization:`Bearer ${i.tokens.access_token}`},h=e=>e.split(",")[1];let a=[];e.forEach(e=>{a.push({action:n,file_path:e.file,encoding:s,content:s==="base64"?h(e.contents):e.contents})});let m=capitalizeFirstLetter(n)+" "+(e.length>1?e.length+" files":e[0].file);const f={branch:env.cms.branch,commit_message:m,actions:a},r=await fetch(d,{method:"POST",headers:u,body:JSON.stringify(f)});if(r.ok)(n==="create"||n==="update")&&t?.onSave?.(),n==="delete"&&(t?.onDelete?.(),history.pushState(null,"",env.baseurl&&!env.local?env.baseurl:"/"));else{const{error:e,message:t}=await r.json();throw new Error(`Publish failed: ${e||t}`)}}