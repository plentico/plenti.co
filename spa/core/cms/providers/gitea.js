import{env}from"../../../generated/env.js";import{makeUrl,normalizeRoute}from"../url_checker.js";import evaluateRoute from"../route_eval.js";const repoUrl=makeUrl(env.cms.repo),owner=repoUrl.pathname.split("/")[1],repo=repoUrl.pathname.split("/")[2],apiBaseUrl=`${repoUrl.origin}/api/v1`,capitalizeFirstLetter=e=>e.charAt(0).toUpperCase()+e.slice(1);export async function commitGitea(e,t,n,s,o){let i;const c=new Promise(e=>{o.subscribe(t=>{i=t,e()})});if(await c,!i.isAuthenticated)throw new Error("Authentication required");const a={"Content-Type":"application/json",Authorization:`Bearer ${i.tokens.access_token}`};let r={email:"cms@plenti.co",name:"CMS"};await fetch(`${apiBaseUrl}`+`/user`,{method:"GET",headers:a}).then(e=>e.json()).then(e=>{r=e});for(const o of e){const i=`${apiBaseUrl}/repos/${owner}/${repo}/contents/`+o.file,d=e=>e.split(",")[1];let u=capitalizeFirstLetter(n)+" "+(e.length>1?e.length+" files":e[0].file),h=s==="base64"?d(o.contents):btoa(unescape(encodeURIComponent(o.contents)));const c={author:{email:r?.email,name:r.login},branch:env.cms.branch,message:u,content:h};(n==="update"||n==="delete")&&await fetch(i,{method:"GET",headers:a}).then(e=>e.json()).then(e=>{c.sha=e.sha});let m=n==="create"?"POST":n==="update"?"PUT":n==="delete"?"DELETE":"";const l=await fetch(i,{method:m,headers:a,body:JSON.stringify(c)});if(l.ok){if((n==="create"||n==="update")&&(t?.onSave?.(),e.length===1&&e[0].file.lastIndexOf(".json")>0)){let t=evaluateRoute(e[0]);normalizeRoute(t)!==normalizeRoute(location.pathname)&&history.pushState({isNew:!0,route:t},"",t)}n==="delete"&&(t?.onDelete?.(),history.pushState(null,"",env.baseurl&&!env.local?env.baseurl:"/"))}else{const{error:e,message:t}=await l.json();throw new Error(`Publish failed: ${e||t}`)}}}