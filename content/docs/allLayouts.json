{
	"title": "allLayouts",
	"group": "Magic Variables",
	"order": 3.02,
	"body": "<h2>Description</h2>The <code>allLayouts</code> variable is a default prop loaded by the Plenti generator automatically. It holds class constructors for every svelte template on your site. This is allows you to dynamically load any component without having to import it explicitly or worry about SSR issues when generating HTML fallbacks.<div><h2>Understanding Component Signatures</h2>Each entry in <code>allLayouts</code> is saved as a \"component signature\" to ensure uniqueness. The component signature for a template is simply its path with any forward slashes \"/\" or periods \".\" converted into underscores \"_\". For example <code>layouts/components/grid.svelte</code> would become&nbsp;<code>layouts_components_grid_svelte</code>. The signatures are absolute, not relative, so they should always start with \"layouts\" and end with \"svelte\".</div><div><h2>Accessing templates in allLayouts</h2>To access a particular template in the <code>allLayouts</code>&nbsp;object, use the component signature with either dot notation (e.g. <code>allLayouts.layouts_components_grid_svelte</code> or bracket notation<code>allLayouts[\"layouts_components_grid_svelte\"]</code>. It's common to use variables provided from your JSON data source to target a particular component, so you'd use bracket notation for that: <code>allLayouts[someVariable]</code> (where \"someVariable\" is equal to a component signature).</div><div><h2>Dynamic components</h2>Svelte has <a href=\"https://svelte.dev/tutorial/svelte-component\" rel=\"noopener noreferrer\">dynamic components</a> that allows you to load templates without explicitly importing them. Combine this with the <code>allLayouts</code> magic prop and you can have a content driven component architecture where you can add/remove/rearrange components without touching your Svelte templates and it will have complete SSR builds so you still get HTML fallbacks for every component.&nbsp;</div><div><br></div><div>Given a content source that looks like this:</div><div><br><codeblock>{<br>&nbsp;&nbsp;\"components\": [<br>&nbsp;&nbsp;&nbsp;&nbsp;{\"name\": \"ball\"},<br>&nbsp;&nbsp;&nbsp;&nbsp;{\"name\": \"block\"}<br>&nbsp;&nbsp;]<br>}</codeblock><br>You could dynamically load the components like this:</div><div><br><codeblock>&lt;script&gt;<br>&nbsp;&nbsp;export let components, allLayouts;<br>&lt;/script&gt;<br><br>{#if components}<br>&nbsp;&nbsp;{#each components as { name }}<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;svelte:component this=\"{allLayouts[\"layouts_components_\" + name + \"_svelte\"]}\" /&gt;<br>&nbsp;&nbsp;{/each}<br>{/if}</codeblock></div>"
}
