{
	"title": "Types",
	"group": "Content",
	"order": 1.01,
	"body": "<h2>Data Source</h2>The <code>content/</code> folder in a project is where all your data lives (in JSON format). This is typically divided into multiple subfolders that define your types. Types are just a way to group content of a similar structure. Individual files inside a type are very flexible, in fact you can define any field schema you'd like and there are no required keys. Even though files may be grouped together as a type, they can actually have variability between them in terms of their field structure - just make sure you account for this in your corresponding <code>layouts/content/</code> files!<div><h2>Accessing content in layouts</h2>Any user defined fields in your json files are accessed by the <code>content.fields</code> prop in your layouts. The top level content prop has the following defined keys that are available for all content sources:<ul><li><code>content.pager</code></li><li><code>content.type</code></li><li><code>content.path</code></li><li><code>content.filepath</code></li><li><code>content.filename</code></li><li><code>content.fields</code></li></ul><h2>Single file types</h2>Anything that appears at the first level within the content folder is a type. This can include single files such as <code>index.json</code> and <code>404.json</code>, which are also types, but only have a one-off data source. You can define your own single file types this way if you'd like. You can also generate a single type using the CLI: <code>plenti new type YOUR_TYPE --single=true</code></div><div><h2>Blueprints</h2>There is an optional, specially named file that goes inside your individual type folders named <code>_blueprint.json</code>. This defines the default content for that specific type (see <a href=\"https://github.com/plentico/plenti/issues/15#issuecomment-760395673\">issue 15</a>). The Plenti Git-CMS uses this to create new content of a particular type. If you have a type that you don't want editors to be able to add new instances of,&nbsp; simply omit the <code>_blueprint.json</code> file. Note that <code>--single</code> content is not meant to be repeated and does not have a corresponding blueprint file.</div>"
}
