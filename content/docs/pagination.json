{
	"title": "Pagination",
	"group": "Configuration",
	"order": 2.55,
	"body": "<h2>What is pagination?</h2>Sometimes you want to aggregate many individual pieces of content onto a single page. This is common for things like blog posts and event pages; there are many individual nodes, but one landing page that collects them all so people can browse what is available. If there are too many items to display on a single page, often times they are broken up into individual pages that people can cycle through by clicking a \"next\" or \"previous\" button (a pager). This increments the current page and loads a new set of items while clearing out the previous set.<div><h2>Implementation</h2>In your sitewide <code>plenti.json</code> configuration file, you can create pagination, for your homepage for example, like this:</div><div><br><codeblock>{<br>&nbsp;&nbsp;\"routes\": {<br>&nbsp;&nbsp;&nbsp;&nbsp;\"index\": \":paginate(totalPages)\"<br>&nbsp;&nbsp;}<br>}</codeblock><br>The value of <code>totalPages</code> in this example <em>must</em> be defined in the template for this route, which in this case is <code>layouts/content/index.svelte</code>. You have complete flexibility to set up your pagination to work in any way that you see fit. We don't force you to use any particular pattern, at build time we simply evaluate the value of whatever variable name you put in your route to determine how many server rendered pages you need. For example you might create pagination in your template to work with the route specified above like this:</div><div><br><codeblock>&lt;script&gt;<br>&nbsp;&nbsp;import Grid from '../components/grid.svelte';<br>&nbsp;&nbsp;import Pager from '../components/pager.svelte';<br>&nbsp;&nbsp;export let content, allContent;<br><br>&nbsp;&nbsp;$: currentPage = content.pager ? content.pager : 1;<br>&nbsp;&nbsp;let postsPerPage = 3;<br>&nbsp;&nbsp;let allPosts = allContent.filter(content =&gt; content.type == \"blog\");<br>&nbsp;&nbsp;let totalPosts = allPosts.length;<br>&nbsp;&nbsp;let totalPages = Math.ceil(totalPosts / postsPerPage); <strong>// This is the variable you set in your route</strong><br>&nbsp;&nbsp;$: postRangeHigh = currentPage * postsPerPage;<br>&nbsp;&nbsp;$: postRangeLow = postRangeHigh - postsPerPage;<br>&lt;/script&gt;<br><br>&lt;Grid {allPosts} {postRangeLow} {postRangeHigh} /&gt;<br>&lt;Pager {currentPage} {totalPages} /&gt;</codeblock><br>(<strong>Note:</strong> the <code>content.pager</code> ships with each node on your site to help keep track of which page you're on)</div><div><h2>Displaying paged items</h2>To display the correct items, you'll want to check if the position of the current post is within the expected range of the items that should be displayed. Keeping with the example above, you could create a <code>layouts/components/grid.svelte</code> file that looks something like this:</div><div><br><codeblock>&lt;script&gt;<br>&nbsp;&nbsp;export let allPosts, postRangeLow, postRangeHigh;<br>&lt;/script&gt;<br><br>&lt;div class='grid'&gt;<br>&nbsp;&nbsp;{#each allPosts as post, i}<br>&nbsp;&nbsp;&nbsp;&nbsp;{#if i &gt;= postRangeLow &amp;&amp; i &lt; postRangeHigh}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;a class='grid-item' href='{post.path}'&gt;{post.fields.title}&lt;/a&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;{/if}<br>&nbsp;&nbsp;{/each}<br>&lt;/div&gt;</codeblock><h2>Creating a pager</h2>The pager is the actual controls used to navigate forward and backward through the paged output. You have ultimate flexibility of how this is implemented, but it might look something like this:</div><div><br><codeblock>&lt;script&gt;<br>&nbsp;&nbsp;export let currentPage, totalPages;<br>&lt;/script&gt;<br><br>&lt;ul&gt;<br>&nbsp;&nbsp;{#if currentPage &gt; 1}<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a href='.'&gt;first&lt;/a&gt;&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a href='{currentPage - 1}'&gt;prev&lt;/a&gt;&lt;/li&gt;<br>&nbsp;&nbsp;{:else}<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;span&gt;first&lt;/span&gt;&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;span&gt;prev&lt;/span&gt;&lt;/li&gt;<br>&nbsp;&nbsp;{/if}<br>&nbsp;&nbsp;{#each [3,2,1] as i}<br>&nbsp;&nbsp;&nbsp;&nbsp;{#if currentPage - i &gt; 0}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a href=\"{currentPage - i}\"&gt;{currentPage - i}&lt;/a&gt;&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;{/if}<br>&nbsp;&nbsp;{/each}<br>&nbsp;&nbsp;&lt;li&gt;&lt;span&gt;{currentPage}&lt;/span&gt;&lt;/li&gt;<br>&nbsp;&nbsp;{#each Array(3) as _, i}<br>&nbsp;&nbsp;&nbsp;&nbsp;{#if currentPage + (i+1) &lt;= totalPages}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a href=\"{currentPage + (i+1)}\"&gt;{currentPage + (i+1)}&lt;/a&gt;&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;{/if}<br>&nbsp;&nbsp;{/each}<br>&nbsp;&nbsp;{#if currentPage &lt; totalPages}<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a href=\"{currentPage + 1}\"&gt;next&lt;/a&gt;&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a href=\"{totalPages}\"&gt;last&lt;/a&gt;&lt;/li&gt;<br>&nbsp;&nbsp;{:else}<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;span&gt;next&lt;/span&gt;&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;span&gt;last&lt;/span&gt;&lt;/li&gt;<br>&nbsp;&nbsp;{/if}<br>&lt;/ul&gt;</codeblock></div>"
}
